//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/scripts/Controls playeur.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controlsplayeur : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controlsplayeur()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls playeur"",
    ""maps"": [
        {
            ""name"": ""playeur"",
            ""id"": ""87f9def2-e822-498a-8198-9c7e1ef53182"",
            ""actions"": [
                {
                    ""name"": ""Horizontal"",
                    ""type"": ""Value"",
                    ""id"": ""c275c29b-60ac-48f8-9397-38d3a84b6d6a"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Vertical"",
                    ""type"": ""Value"",
                    ""id"": ""e6b96428-16a4-4037-80f1-7f0b2a83edd7"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""55dbe810-e014-4344-9e45-dd35a8bd2407"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""51d4077c-22bb-4af9-b09f-66542359a85f"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""68d267a5-76e2-487c-9f4b-2780061d24d1"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""84a46a8d-bf0c-4fca-9478-7b4382da1ee2"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""b0cdfee7-022e-4008-b1a9-f3fabaee38e3"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""35e5478a-8e0d-4a4e-a112-3fb2488b3a4e"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""42ac1f2f-90b4-456f-abc9-ffa8ffb2a637"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9b1b9a6d-e840-474c-ba58-84992fb487e6"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""keybord"",
            ""bindingGroup"": ""keybord"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""New control scheme"",
            ""bindingGroup"": ""New control scheme"",
            ""devices"": []
        }
    ]
}");
        // playeur
        m_playeur = asset.FindActionMap("playeur", throwIfNotFound: true);
        m_playeur_Horizontal = m_playeur.FindAction("Horizontal", throwIfNotFound: true);
        m_playeur_Vertical = m_playeur.FindAction("Vertical", throwIfNotFound: true);
        m_playeur_Shoot = m_playeur.FindAction("Shoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // playeur
    private readonly InputActionMap m_playeur;
    private IPlayeurActions m_PlayeurActionsCallbackInterface;
    private readonly InputAction m_playeur_Horizontal;
    private readonly InputAction m_playeur_Vertical;
    private readonly InputAction m_playeur_Shoot;
    public struct PlayeurActions
    {
        private @Controlsplayeur m_Wrapper;
        public PlayeurActions(@Controlsplayeur wrapper) { m_Wrapper = wrapper; }
        public InputAction @Horizontal => m_Wrapper.m_playeur_Horizontal;
        public InputAction @Vertical => m_Wrapper.m_playeur_Vertical;
        public InputAction @Shoot => m_Wrapper.m_playeur_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_playeur; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayeurActions set) { return set.Get(); }
        public void SetCallbacks(IPlayeurActions instance)
        {
            if (m_Wrapper.m_PlayeurActionsCallbackInterface != null)
            {
                @Horizontal.started -= m_Wrapper.m_PlayeurActionsCallbackInterface.OnHorizontal;
                @Horizontal.performed -= m_Wrapper.m_PlayeurActionsCallbackInterface.OnHorizontal;
                @Horizontal.canceled -= m_Wrapper.m_PlayeurActionsCallbackInterface.OnHorizontal;
                @Vertical.started -= m_Wrapper.m_PlayeurActionsCallbackInterface.OnVertical;
                @Vertical.performed -= m_Wrapper.m_PlayeurActionsCallbackInterface.OnVertical;
                @Vertical.canceled -= m_Wrapper.m_PlayeurActionsCallbackInterface.OnVertical;
                @Shoot.started -= m_Wrapper.m_PlayeurActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_PlayeurActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_PlayeurActionsCallbackInterface.OnShoot;
            }
            m_Wrapper.m_PlayeurActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Horizontal.started += instance.OnHorizontal;
                @Horizontal.performed += instance.OnHorizontal;
                @Horizontal.canceled += instance.OnHorizontal;
                @Vertical.started += instance.OnVertical;
                @Vertical.performed += instance.OnVertical;
                @Vertical.canceled += instance.OnVertical;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
            }
        }
    }
    public PlayeurActions @playeur => new PlayeurActions(this);
    private int m_keybordSchemeIndex = -1;
    public InputControlScheme keybordScheme
    {
        get
        {
            if (m_keybordSchemeIndex == -1) m_keybordSchemeIndex = asset.FindControlSchemeIndex("keybord");
            return asset.controlSchemes[m_keybordSchemeIndex];
        }
    }
    private int m_NewcontrolschemeSchemeIndex = -1;
    public InputControlScheme NewcontrolschemeScheme
    {
        get
        {
            if (m_NewcontrolschemeSchemeIndex == -1) m_NewcontrolschemeSchemeIndex = asset.FindControlSchemeIndex("New control scheme");
            return asset.controlSchemes[m_NewcontrolschemeSchemeIndex];
        }
    }
    public interface IPlayeurActions
    {
        void OnHorizontal(InputAction.CallbackContext context);
        void OnVertical(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
    }
}
